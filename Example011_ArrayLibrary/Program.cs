
void FillArray(int[] collection) //метод заполнения массива
// наименование       аргумент, приходящий в этот массив (void метод ничего не возвращает)
{
    //кол.элементов = длина массива
    int length = collection.Length; // получить длину нашего массива
    int index = 0; // чтобы пройтись по всем элементам массива
    while (index < length)
    {
        //обратиться к аргументу collection на позицию index и 
        // положить туда новое случайное целое число из диапазона 1-10
        // (при этом 10 не будет учитываться в данном операторе)
        collection[index] = new Random().Next(1, 10);
        index++; //аналог записи - index=index+1;
    }

}

void PrintArray(int[] col) //метод вывода массива
//наименование     аргумент, приходящий в этот массив
{
    //кол.элементов = длина массива
    int count = col.Length; // получить длину нашего массива
    int position = 0; // чтобы пройтись по всем элементам массива
    while (position < count)

    {
        //будем выводить на экран значение текщего элемента
        Console.WriteLine(col[position]);
        position++;
    }
}

int IndexOf(int[] collection, int find) // метод будет возвращать позицию (индекс) элемента массива, 
{                                       // который равен какому-то числу, которые мы сами задаём
    //кол.элементов = длина массива
    int count = collection.Length; // получить длину нашего массива
    int index = 0; // чтобы пройтись по всем элементам массива
    int position = -1;// переменнная чтобы сохранить найденную позицию (индекс) элемента, пока ставим = 0
    // но если мы будем искать число в нашем массиве, например 444, то исходя из заданных параметров массива (0-10)
    // такое число не может быть найдено и при int position = 0 результат вывода всегда будет равен 0, 
    // что не совсем верно, поэтому принято ставить int position = -1,
    // тогда если подходящий элемент массива не будет найден, терминал выдАст нам -1, что и будет означать
    // отсутствие элемента в массиве, который равен find, в нашем примере 444 см. строку 69

    while (index < count)
    {
        if (collection[index] == find)
        {
            position = index;
            break;  // оператор позволяет прервать операции после нахождения позиции (индекса) 
                    // первого искомого элемента в массиве = 4
        }
        index++;
    }
    return position; // возвращаем нам найденную позицию (индекс) элемента
}

int[] array = new int[10]; // оператор задаёт новый массив из 10 элементов, по умолчению он наполнен нулями
                           // и для того чтобы его заполнить какими-то числами используем метод заполнения массива

FillArray(array);
array[4] = 4; // специально вводим значения 4 в наш уже рандомный массив на позиции 4 и 6
array[6] = 4;
PrintArray(array);

Console.WriteLine(); // выводим пустую строчку, чтобы отделить массив от найденного индекса

int pos = IndexOf(array, 444); // в данную переменную положим результат работы метода IndexOf
                             // в качестве аргуентов будет передаваться наш массив array и будем искать 4
Console.WriteLine(pos);
