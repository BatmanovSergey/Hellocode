string[,] table = new string[2, 5];

// String.Empty - инициализация сток по умолчанию пуcтой строкой
// Обращение к элементам массива
// table [0, 0]   table [0, 1]   table [0, 2]   table [0, 3]   table [0, 4]
// table [1, 0]   table [1, 1]   table [1, 2]   table [1, 3]   table [1, 4]

table[1, 2] = "слово";
// чтобы вывести массив используем цикл for

for (int rows = 0; rows < 2; rows++)
{
    for (int columns = 0; columns < 5; columns++)
    {
        Console.Write($"-{table[rows, columns]}-"); // Чтобы увидет пустые элементы добавим обрамление --
    }
    Console.WriteLine();
}

int[,] matrix = new int[3, 4]; // инициализация массива по умолчанию нулями
for (int i = 0; i < 3; i++)
{
    for (int j = 0; j < 4; j++)
    {
        Console.Write($"{matrix[i, j]} ");
    }
    Console.WriteLine();
}
Console.WriteLine();


void PrintArray(int[,] matr) // метод вывода на печать
{
    for (int i = 0; i < matr.GetLength(0); i++) // matrix1.GetLength(0) Позволяет пробегать по строкам
    {
        for (int j = 0; j < matr.GetLength(1); j++) // matrix1.GetLength(1) Позволяет пробегать по столбам
        {
            Console.Write($"{matr[i, j]} ");
        }
        Console.WriteLine();
    }
}

void FillArray(int[,] matr) // Метод заполнения массива случайными числами
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            matr[i, j] = new Random().Next(1, 10);// [1, 10) - полуинтервал, 10 не берётся
        }
    }
}

int[,] matrix1 = new int[3, 4]; // инициализация массива по умолчанию нулями
PrintArray(matrix1); // Вызов метода

Console.WriteLine();

FillArray(matrix1); // Вызов метода
PrintArray(matrix1); // Вызов метода

// Попробуем взять классическую задачу, где простая двухцветная картинка. 
// Идея: обычная прямоугольная таблица чисел, для которых вы можете определить в качестве 0 незакрашенный
// пиксель, а в качестве 1 — закрашенный. Это абсолютно прямая отсылка к двумерным числовым
// массивам. 
// Определим двумерный массив, представляющий наше изображение. Здесь он изначально определён.
// Не обязательно указывать количество строк и столбцов, если у вас есть фиксированные данные. Это
// можно опустить. Далее я скрою часть кода с нулями и единицами, чтобы она нас не отвлекала. И опишу
// метод, который будет выводить картинку. Казалось бы, это тот же двумерный массив, то есть
// технически мы можем воспользоваться методом, который был описан ранее. Но есть небольшая
// проблема: печататься будет как 0, так и 1. Хочу сделать так, чтобы чуть-чуть более интересный вывод
// этого массива производился. 

int[,] pic = new int[,]
{  //1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, //1
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, //2
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, //3
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, //4
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, //5
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, //6
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, //7
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, //8
    {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, //9
    {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, //10
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, //11
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, //12
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, //13
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, //14
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, //15
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, //16
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }, //17
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }, //18
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 }, //19
    {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 }, //20
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }, //21
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 }, //22
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, //23
};

int[,] pic1 = new int[,]
{  //1  2  3  4  5  6  7  8  9  10
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,}, //1
    {0, 0, 1, 1, 1, 1, 1, 1, 0, 0,}, //2
    {0, 0, 1, 0, 0, 0, 0, 1, 0, 0,}, //3
    {0, 0, 1, 0, 0, 0, 0, 1, 0, 0,}, //4
    {0, 0, 1, 0, 0, 0, 0, 1, 0, 0,}, //5
    {0, 0, 1, 0, 0, 0, 0, 1, 0, 0,}, //6
    {0, 0, 1, 0, 0, 0, 0, 1, 0, 0,}, //7
    {0, 0, 1, 1, 1, 1, 1, 1, 0, 0,}, //8
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,}, //9
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,}, //10

};

void PrintImage(int[,] image) // метод вывода на печать
{
    for (int i = 0; i < image.GetLength(0); i++) // matrix1.GetLength(0) Позволяет пробегать по строкам
    {
        for (int j = 0; j < image.GetLength(1); j++) // matrix1.GetLength(1) Позволяет пробегать по столбам
        {
            // Console.Write($"{image[i, j]} ");
            if (image[i, j] == 0) Console.Write(" ");
            else Console.Write("+");
        }
        Console.WriteLine();
    }
}

void FillImage(int row, int col, int[,] image) // В качеcтве аргументов передаем позицию строки и столбца точки 
                                               // (обязательно внутри контура), с которой мы должны начать нашу закраску
{
    if (image[row, col] == 0) // Алгоритм позволяет закрашивать замкнутые области, но
    {                         // требует значительных ресурсов
        image[row, col] = 1;
        FillImage(row - 1, col, image);
        FillImage(row, col - 1, image);
        FillImage(row + 1, col, image);
        FillImage(row, col + 1, image);
    }
}

PrintImage(pic);
FillImage(13, 13, pic);
PrintImage(pic);

PrintImage(pic1);
FillImage(5, 5, pic1);
PrintImage(pic1);

// Факториал

double Factorial(int n) // метод вычисления факториала
{
    // 1!=1
    // 0!=1 в общем случае
    if (n == 1) return 1;
    else return n * Factorial(n - 1);

}
int num = 5;
Console.WriteLine($"Факториал {num}!= {Factorial(num)}"); // 3!=1*2*3=6
Console.WriteLine();

for (int i = 1; i < 40; i++)
{
    Console.WriteLine($"Факториал {i}!= {Factorial(i)}");
}
Console.WriteLine();

// Чиcла Фибоначчи
// f(1) = 1
// f(2) = 1
// f(n) = f(n-1) + f(n-2)

double Fibonacci(int n) // метод вычисления чисел Фибоначчи
{
    if (n == 1 || n == 2) return 1;
    else return Fibonacci(n - 1) + Fibonacci(n - 2);
}

for (int i = 1; i < 30; i++)
{
    Console.WriteLine($"f({i}) = {Fibonacci(i)}");
}